/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 09:18:40 GMT 2023
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.list.FixedSizeList;
import org.apache.commons.collections4.queue.CircularFifoQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CollectionUtils_ESTest extends CollectionUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        CollectionUtils.removeRange((Collection<Integer>) linkedList0, (-1), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The start index can't be less than 0.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedHashSet<Locale.FilteringMode> linkedHashSet0 = new LinkedHashSet<Locale.FilteringMode>();
      DefaultEquator<Locale.FilteringMode> defaultEquator0 = DefaultEquator.defaultEquator();
      Collection<Locale.FilteringMode> collection0 = CollectionUtils.retainAll((Iterable<Locale.FilteringMode>) linkedHashSet0, (Iterable<? extends Locale.FilteringMode>) linkedHashSet0, (Equator<? super Locale.FilteringMode>) defaultEquator0);
      Collection<Locale.FilteringMode> collection1 = CollectionUtils.retainAll(collection0, (Collection<?>) linkedHashSet0);
      assertTrue(collection1.equals((Object)collection0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Iterator<Object> iterator0 = linkedList0.descendingIterator();
      // Undeclared exception!
      try { 
        CollectionUtils.get(iterator0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.union((Iterable<? extends Integer>) null, (Iterable<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // a
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.isSubCollection((Collection<?>) null, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // a
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.isEqualCollection((Collection<?>) null, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // a
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.intersection((Iterable<? extends Integer>) null, (Iterable<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // a
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.collate((Iterable<? extends Integer>) null, (Iterable<? extends Integer>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterableA
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedHashSet<Locale.FilteringMode> linkedHashSet0 = new LinkedHashSet<Locale.FilteringMode>();
      boolean boolean0 = CollectionUtils.isEmpty(linkedHashSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<Locale.FilteringMode> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      Collection<Locale.FilteringMode> collection0 = CollectionUtils.subtract((Iterable<? extends Locale.FilteringMode>) serviceLoader0, (Iterable<? extends Locale.FilteringMode>) serviceLoader0);
      Stack<Integer> stack0 = new Stack<Integer>();
      FixedSizeList<Integer> fixedSizeList0 = FixedSizeList.fixedSizeList((List<Integer>) stack0);
      ListIterator<Integer> listIterator0 = fixedSizeList0.listIterator();
      HashMap<Integer, Locale.FilteringMode> hashMap0 = new HashMap<Integer, Locale.FilteringMode>();
      Transformer<Integer, Locale.FilteringMode> transformer0 = MapTransformer.mapTransformer((Map<? super Integer, ? extends Locale.FilteringMode>) hashMap0);
      Collection<Locale.FilteringMode> collection1 = CollectionUtils.collect((Iterator<? extends Integer>) listIterator0, (Transformer<? super Integer, ? extends Locale.FilteringMode>) transformer0, collection0);
      assertSame(collection0, collection1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Iterator<Object> iterator0 = linkedList0.descendingIterator();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 2);
      InvokerTransformer<Object, LinkedList<Object>> invokerTransformer0 = new InvokerTransformer<Object, LinkedList<Object>>("", classArray0, classArray0);
      IfTransformer<Object, LinkedList<Object>> ifTransformer0 = new IfTransformer<Object, LinkedList<Object>>(instanceofPredicate0, invokerTransformer0, invokerTransformer0);
      Collection<LinkedList<Object>> collection0 = CollectionUtils.collect(iterator0, (Transformer<? super Object, ? extends LinkedList<Object>>) ifTransformer0);
      // Undeclared exception!
      try { 
        CollectionUtils.extractSingleton(collection0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can extract singleton only when collection size == 1
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>(linkedList0);
      // Undeclared exception!
      try { 
        CollectionUtils.removeRange((Collection<Integer>) treeSet0, 0, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // The end index can't be greater than the size of collection.
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Stack<InstanceofPredicate> stack0 = new Stack<InstanceofPredicate>();
      Collection<InstanceofPredicate> collection0 = CollectionUtils.removeRange((Collection<InstanceofPredicate>) stack0, 0, 0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      DefaultEquator<Integer> defaultEquator0 = DefaultEquator.defaultEquator();
      Collection<Integer> collection0 = CollectionUtils.retainAll((Iterable<Integer>) hashSet0, (Iterable<? extends Integer>) hashSet0, (Equator<? super Integer>) defaultEquator0);
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) collection0, (Collection<?>) hashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>(1);
      CollectionUtils.permutations((Collection<Integer>) arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      FixedSizeList<Integer> fixedSizeList0 = FixedSizeList.fixedSizeList((List<Integer>) stack0);
      boolean boolean0 = CollectionUtils.isFull(fixedSizeList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      CollectionUtils.reverseArray(objectArray0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Collection<Integer> collection0 = CollectionUtils.emptyCollection();
      boolean boolean0 = CollectionUtils.sizeIsEmpty(collection0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer(3);
      // Undeclared exception!
      try { 
        CollectionUtils.size(integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: java.lang.Integer
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      // Undeclared exception!
      try { 
        CollectionUtils.get((Object) locale_Category0, (-551));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -551
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.get((Object) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported object type: null
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtils.checkIndexBounds((-518));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index cannot be negative: -518
         //
         verifyException("org.apache.commons.collections4.CollectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CircularFifoQueue<Integer> circularFifoQueue0 = new CircularFifoQueue<Integer>(1633);
      Integer integer0 = new Integer(1633);
      boolean boolean0 = CollectionUtils.addIgnoreNull((Collection<Integer>) circularFifoQueue0, integer0);
      assertTrue(circularFifoQueue0.contains(1633));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      Vector<Collection<Object>> vector0 = new Vector<Collection<Object>>();
      boolean boolean0 = CollectionUtils.exists((Iterable<Collection<Object>>) vector0, (Predicate<? super Collection<Object>>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedHashSet<LinkedList<Integer>> linkedHashSet0 = new LinkedHashSet<LinkedList<Integer>>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedHashSet0.add(linkedList0);
      Predicate<LinkedList<Integer>> predicate0 = EqualPredicate.equalPredicate(linkedList0);
      boolean boolean0 = CollectionUtils.filterInverse((Iterable<LinkedList<Integer>>) linkedHashSet0, (Predicate<? super LinkedList<Integer>>) predicate0);
      assertFalse(linkedHashSet0.contains(linkedList0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedHashSet<LinkedList<Integer>> linkedHashSet0 = new LinkedHashSet<LinkedList<Integer>>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Predicate<LinkedList<Integer>> predicate0 = EqualPredicate.equalPredicate(linkedList0);
      boolean boolean0 = CollectionUtils.filterInverse((Iterable<LinkedList<Integer>>) linkedHashSet0, (Predicate<? super LinkedList<Integer>>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Comparator<Collection<Integer>> comparator0 = (Comparator<Collection<Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS_OR_EQUAL;
      Predicate<Collection<Integer>> predicate0 = ComparatorPredicate.comparatorPredicate((Collection<Integer>) null, comparator0, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      boolean boolean0 = CollectionUtils.filterInverse((Iterable<Collection<Integer>>) null, (Predicate<? super Collection<Integer>>) predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Closure<Locale.Category> closure0 = NOPClosure.nopClosure();
      CollectionUtils.forAllButLastDo((Iterator<Locale.Category>) null, closure0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Integer integer0 = new Integer((-2264));
      EqualPredicate<Integer> equalPredicate0 = new EqualPredicate<Integer>(integer0);
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      Integer integer1 = CollectionUtils.find((Iterable<Integer>) arrayDeque0, (Predicate<? super Integer>) equalPredicate0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedHashSet<LinkedList<Integer>> linkedHashSet0 = new LinkedHashSet<LinkedList<Integer>>();
      DefaultEquator<LinkedList<Integer>> defaultEquator0 = DefaultEquator.defaultEquator();
      boolean boolean0 = CollectionUtils.isEqualCollection((Collection<? extends LinkedList<Integer>>) linkedHashSet0, (Collection<? extends LinkedList<Integer>>) linkedHashSet0, (Equator<? super LinkedList<Integer>>) defaultEquator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      linkedList0.add(locale_Category0);
      linkedList0.add(locale_Category0);
      boolean boolean0 = CollectionUtils.isEqualCollection((Collection<?>) linkedList0, (Collection<?>) linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      Integer[] integerArray0 = new Integer[2];
      boolean boolean0 = CollectionUtils.containsAny((Collection<?>) hashSet0, integerArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<Locale.FilteringMode> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      Collection<Locale.FilteringMode> collection0 = CollectionUtils.subtract((Iterable<? extends Locale.FilteringMode>) serviceLoader0, (Iterable<? extends Locale.FilteringMode>) serviceLoader0);
      boolean boolean0 = CollectionUtils.isNotEmpty(collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.load(class0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Integer> list0 = CollectionUtils.collate((Iterable<? extends Integer>) serviceLoader0, (Iterable<? extends Integer>) serviceLoader0, (Comparator<? super Integer>) comparator0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      List<Integer> list0 = CollectionUtils.collate((Iterable<? extends Integer>) stack0, (Iterable<? extends Integer>) stack0, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Collection<Object> collection0 = CollectionUtils.emptyIfNull((Collection<Object>) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CollectionUtils.collate((Iterable<?>) collection0, (Iterable<?>) null, (Comparator<? super Object>) comparator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // iterableB
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMap<Transformer<Locale.Category, Locale.Category>, Locale.Category> hashMap0 = new HashMap<Transformer<Locale.Category, Locale.Category>, Locale.Category>();
      // Undeclared exception!
      try { 
        CollectionUtils.get((Map<Transformer<Locale.Category, Locale.Category>, Locale.Category>) hashMap0, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 10
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer integer0 = new Integer((-2264));
      EqualPredicate<Integer> equalPredicate0 = new EqualPredicate<Integer>(integer0);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 2);
      Transformer<Integer, Integer> transformer0 = InvokerTransformer.invokerTransformer("924&b.Ji{.:Zb", (Class<?>[]) classArray0, (Object[]) classArray0);
      IfTransformer<Integer, Integer> ifTransformer0 = new IfTransformer<Integer, Integer>(equalPredicate0, transformer0, transformer0);
      Collection<Integer> collection0 = CollectionUtils.transformingCollection((Collection<Integer>) stack0, (Transformer<? super Integer, ? extends Integer>) ifTransformer0);
      assertFalse(collection0.contains(integer0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Iterator<Object> iterator0 = linkedList0.descendingIterator();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 2);
      InvokerTransformer<Object, LinkedList<Object>> invokerTransformer0 = new InvokerTransformer<Object, LinkedList<Object>>("", classArray0, classArray0);
      IfTransformer<Object, LinkedList<Object>> ifTransformer0 = new IfTransformer<Object, LinkedList<Object>>(instanceofPredicate0, invokerTransformer0, invokerTransformer0);
      Collection<LinkedList<Object>> collection0 = CollectionUtils.collect(iterator0, (Transformer<? super Object, ? extends LinkedList<Object>>) ifTransformer0);
      Collection<LinkedList<Object>> collection1 = CollectionUtils.disjunction((Iterable<? extends LinkedList<Object>>) collection0, (Iterable<? extends LinkedList<Object>>) collection0);
      assertNotSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Collection<Integer> collection0 = CollectionUtils.synchronizedCollection((Collection<Integer>) linkedList0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>(linkedList0);
      Integer integer0 = new Integer((-2794));
      treeSet0.add(integer0);
      Collection<Integer> collection0 = CollectionUtils.union((Iterable<? extends Integer>) treeSet0, (Iterable<? extends Integer>) treeSet0);
      DefaultEquator<Integer> defaultEquator0 = DefaultEquator.defaultEquator();
      Collection<Integer> collection1 = CollectionUtils.removeAll((Iterable<Integer>) collection0, (Iterable<? extends Integer>) collection0, (Equator<? super Integer>) defaultEquator0);
      assertFalse(collection1.equals((Object)collection0));
  }
}
